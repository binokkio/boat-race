-r 0

++ Store fs kwarg in context ++
-t PathDef '[=fs]'
-s fs

++ Create `repo` path ++
-t PathDef '[=fs]/repo-${.now?string["yyyyMMdd-HHmmss"]}'
-s repo

++ Clone gingester to `repo` ++
-t Exec !stdin 'mkdir -p ${repo}' . IGNORE IGNORE
-t Clone:Exec !stdin 'git clone "[=gingester!"../gingester"]" ${repo}' . IGNORE IGNORE

++ Iterate target checkouts ++
-t JsonDef @ '[=checkouts]'
-t JsonPath '$[*]'
-s checkout

++ Checkout target ++
-t Exec !stdin 'git checkout ${checkout}' '${repo}' IGNORE IGNORE

++ Get version from pom ++
-t PathDef '${repo}/pom.xml'
-t XmlToJson
-t JsonPath '$.version'
-s version

++ Get commit timestamp ++
-t Exec !stdin 'git log -1 "--date=format:%Y-%m-%dT%H-%M-%S%z" --format=%ad' '${repo}' YIELD IGNORE
-t InputStreamToString
-ss timestamp '${__in__?trim}'

++ Define id ++
-ss id '${version}__${timestamp}__${checkout}'

++ Build gingester at this commit ++
-t Log 'Building gingester ${id}'
-t Boat:Exec !stdin 'mvn clean package -DskipTests' '${repo}' IGNORE IGNORE

++ Iterate through the boat race legs ++
-t ResourceOpen '/legs/index.txt'
-t InputStreamSplit
-t InputStreamToString
-s leg
-sft Leg:RegexFilterIn '[=legFilter!".*"]'

++ Maybe prepare ++
-t ResourceOpen '/legs/${leg}/prepare.gcli' optional!
-t Log 'Preparing for leg ${leg}'
-t InputStreamToString
-t Gcli '${__in__}'
-stt OnFinish

++ Time and run the leg a couple of times ++
-t Log 'Gingester ${id} starting [=rounds!3] rounds of ${leg}'
-t ResourceOpen '/legs/${leg}/leg.gcli'
-t PathOverwriteSync '[=fs]/leg.gcli'
-t Round:Repeat [=rounds!3]
-t TimeNow -s startTime
-t Exec !stdin 'java -Xms1g -Xmx1g -jar ${repo}/executable/target/gingester-${version}.jar -r 0 -cf [=fs]/leg.gcli \'{fs:"[=fs]"}\'' . YIELD LOG ignoreExitCode!
-t InputStreamToString
-s result
-t TimeNow -s endTime

++ Filter out runs that did not produce the expected result ++
-t ResourceOpen '/legs/${leg}/expected-result.txt'
-t InputStreamToString
-t Filter 'context.require("result").equals(in)'

++ Calculate duration ++
-t Eval 'import java.time.Duration; Duration.between(context.require("startTime"), context.require("endTime"))'
-s duration
-t Log 'Gingester ${id} finished ${leg} round ${Round.description + 1} in ${duration}'

++ Collect durations per leg ++
-f leg
-sf Boat
-stt MapCollectLists ^ tree
-t ObjectToJson
-t JsonDef @ '{
        version: "${version}",
        timestamp: "${timestamp}",
        checkout: "${checkout}",
        performance: ${__in__}
    }'
-t JsonToString pretty
-t PathOverwrite '[=fs]/results/${id}.json'

++ Tidy up ++
-sf Clone
-stt OnFinish
-f repo
-t PathDelete recursive
-t PathDef '[=fs]/leg.gcli'
-t PathDelete

++ Report ++
-cr report '[@kwargs /]'