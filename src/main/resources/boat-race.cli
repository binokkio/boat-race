-r 0

-t Giterate '{
        origin: "[=origin]"
    }'

-s repo

+ 'Get version at commit'
-t PathDef '${__in__}/pom.xml'
-t XmlToJson
-t JsonPath '$.version'
-t JsonToString
-s version
-t Distinct

+ 'Early versions use an incompatible syntax, filter those out'
-t RegexFilterOut '^0\\.\\d\\.'
-t RegexFilterOut '^0\\.1[0-7]\\.'

+ 'Build gingester at this commit'
-t Log 'Building gingester ${version} from ${actual}'
-sft Exec !stdin 'mvn clean package -DskipTests' '${repo}' IGNORE IGNORE

+ 'Iterate through the boat race legs'
-t PathSearch '{
        root: "[=legs!"src/main/gcli/boat-race-legs"]",
        globs: "**/leg.cli"
    }'

+ 'Get leg name'
-t StringDef '${path.absolute?keepBeforeLast("/")?keepAfterLast("/")}'
-s leg

+ 'Time and run the leg a couple of times'
-t Repeat 3
-t Log 'Gingester ${version} starting leg ${leg} #${Repeat.description + 1}'
-t TimeNow -s startTime
-t Exec !stdin 'java -jar ${repo}/executable/target/gingester-${version}.jar -cf ${path.absolute}' . YIELD IGNORE ignoreExitCode!
-t InputStreamToString
-s result
-t TimeNow -s endTime

+ 'Filter out runs that did not produce the expected result'
-t PathDef '${path.absolute?keepBeforeLast("/")}/expected-result.txt'
-t InputStreamToString
-t Filter 'context.require("result").equals(in)'

+ 'Calculate duration'
-t Eval 'import java.time.Duration; Duration.between(context.require("startTime"), context.require("endTime"))'
-s duration
-t Log 'Gingester ${version} finished leg ${leg} #${Repeat.description + 1} in ${duration}'

+ 'Collect durations per leg'
-f leg
-stt MapCollectLists ^ tree
-s durationsPerLegMap

+ 'Collect durationsPerLegMap per version'
-f version
-t MapCollect ^ linked

+ 'Just a printout for now'
-t ObjectToJson
-t JsonToString pretty
-t Out